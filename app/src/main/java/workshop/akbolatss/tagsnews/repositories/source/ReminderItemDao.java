package workshop.akbolatss.tagsnews.repositories.source;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REMINDER_ITEM".
*/
public class ReminderItemDao extends AbstractDao<ReminderItem, Long> {

    public static final String TABLENAME = "REMINDER_ITEM";

    /**
     * Properties of entity ReminderItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RequestCode = new Property(1, Integer.class, "requestCode", false, "REQUEST_CODE");
        public final static Property IsActive = new Property(2, Boolean.class, "isActive", false, "IS_ACTIVE");
        public final static Property Hour = new Property(3, Integer.class, "hour", false, "HOUR");
        public final static Property Minute = new Property(4, Integer.class, "minute", false, "MINUTE");
        public final static Property PM_AM = new Property(5, String.class, "PM_AM", false, "PM__AM");
    }


    public ReminderItemDao(DaoConfig config) {
        super(config);
    }
    
    public ReminderItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMINDER_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"REQUEST_CODE\" INTEGER," + // 1: requestCode
                "\"IS_ACTIVE\" INTEGER," + // 2: isActive
                "\"HOUR\" INTEGER," + // 3: hour
                "\"MINUTE\" INTEGER," + // 4: minute
                "\"PM__AM\" TEXT);"); // 5: PM_AM
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMINDER_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReminderItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer requestCode = entity.getRequestCode();
        if (requestCode != null) {
            stmt.bindLong(2, requestCode);
        }
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(3, isActive ? 1L: 0L);
        }
 
        Integer hour = entity.getHour();
        if (hour != null) {
            stmt.bindLong(4, hour);
        }
 
        Integer minute = entity.getMinute();
        if (minute != null) {
            stmt.bindLong(5, minute);
        }
 
        String PM_AM = entity.getPM_AM();
        if (PM_AM != null) {
            stmt.bindString(6, PM_AM);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReminderItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer requestCode = entity.getRequestCode();
        if (requestCode != null) {
            stmt.bindLong(2, requestCode);
        }
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(3, isActive ? 1L: 0L);
        }
 
        Integer hour = entity.getHour();
        if (hour != null) {
            stmt.bindLong(4, hour);
        }
 
        Integer minute = entity.getMinute();
        if (minute != null) {
            stmt.bindLong(5, minute);
        }
 
        String PM_AM = entity.getPM_AM();
        if (PM_AM != null) {
            stmt.bindString(6, PM_AM);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReminderItem readEntity(Cursor cursor, int offset) {
        ReminderItem entity = new ReminderItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // requestCode
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isActive
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // hour
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // minute
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // PM_AM
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReminderItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRequestCode(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIsActive(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setHour(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMinute(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPM_AM(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReminderItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReminderItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReminderItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
