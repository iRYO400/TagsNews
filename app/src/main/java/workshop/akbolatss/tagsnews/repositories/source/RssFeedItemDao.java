package workshop.akbolatss.tagsnews.repositories.source;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RSS_FEED_ITEM".
*/
public class RssFeedItemDao extends AbstractDao<RssFeedItem, Long> {

    public static final String TABLENAME = "RSS_FEED_ITEM";

    /**
     * Properties of entity RssFeedItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Feed_title = new Property(1, String.class, "feed_title", false, "FEED_TITLE");
        public final static Property Feed_link = new Property(2, String.class, "feed_link", false, "FEED_LINK");
        public final static Property Feed_pubDate = new Property(3, String.class, "feed_pubDate", false, "FEED_PUB_DATE");
        public final static Property Feed_image = new Property(4, String.class, "feed_image", false, "FEED_IMAGE");
        public final static Property Feed_description = new Property(5, String.class, "feed_description", false, "FEED_DESCRIPTION");
        public final static Property Feed_source = new Property(6, String.class, "feed_source", false, "FEED_SOURCE");
    }


    public RssFeedItemDao(DaoConfig config) {
        super(config);
    }
    
    public RssFeedItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RSS_FEED_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FEED_TITLE\" TEXT," + // 1: feed_title
                "\"FEED_LINK\" TEXT," + // 2: feed_link
                "\"FEED_PUB_DATE\" TEXT," + // 3: feed_pubDate
                "\"FEED_IMAGE\" TEXT," + // 4: feed_image
                "\"FEED_DESCRIPTION\" TEXT," + // 5: feed_description
                "\"FEED_SOURCE\" TEXT);"); // 6: feed_source
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RSS_FEED_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RssFeedItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String feed_title = entity.getFeed_title();
        if (feed_title != null) {
            stmt.bindString(2, feed_title);
        }
 
        String feed_link = entity.getFeed_link();
        if (feed_link != null) {
            stmt.bindString(3, feed_link);
        }
 
        String feed_pubDate = entity.getFeed_pubDate();
        if (feed_pubDate != null) {
            stmt.bindString(4, feed_pubDate);
        }
 
        String feed_image = entity.getFeed_image();
        if (feed_image != null) {
            stmt.bindString(5, feed_image);
        }
 
        String feed_description = entity.getFeed_description();
        if (feed_description != null) {
            stmt.bindString(6, feed_description);
        }
 
        String feed_source = entity.getFeed_source();
        if (feed_source != null) {
            stmt.bindString(7, feed_source);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RssFeedItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String feed_title = entity.getFeed_title();
        if (feed_title != null) {
            stmt.bindString(2, feed_title);
        }
 
        String feed_link = entity.getFeed_link();
        if (feed_link != null) {
            stmt.bindString(3, feed_link);
        }
 
        String feed_pubDate = entity.getFeed_pubDate();
        if (feed_pubDate != null) {
            stmt.bindString(4, feed_pubDate);
        }
 
        String feed_image = entity.getFeed_image();
        if (feed_image != null) {
            stmt.bindString(5, feed_image);
        }
 
        String feed_description = entity.getFeed_description();
        if (feed_description != null) {
            stmt.bindString(6, feed_description);
        }
 
        String feed_source = entity.getFeed_source();
        if (feed_source != null) {
            stmt.bindString(7, feed_source);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RssFeedItem readEntity(Cursor cursor, int offset) {
        RssFeedItem entity = new RssFeedItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // feed_title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // feed_link
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // feed_pubDate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // feed_image
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // feed_description
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // feed_source
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RssFeedItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFeed_title(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFeed_link(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFeed_pubDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFeed_image(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFeed_description(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFeed_source(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RssFeedItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RssFeedItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RssFeedItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
